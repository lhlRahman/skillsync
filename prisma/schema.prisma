generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @db.VarChar(255) @unique
  username  String?  @db.VarChar(255) @unique
  firstName String?  @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  type      Int    // 1 for employ for volunteer
  clerkId   String?  @db.VarChar(255) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio      String?   @db.Text
  hoursCompleted    Int     @default(0)
  postedJobs Job[]   @relation("JobPoster") // For employers: Jobs they've posted
  appliedJobs Application[] @relation("Applicant") // For volunteers: Jobs they've applied to
}

model Job {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String?      @db.Text
  location    String       @db.VarChar(255)
  imageUrl    String?      @db.VarChar(255)
  startDate   DateTime     @db.Date
  endDate     DateTime     @db.Date
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  acceptedApplicants Int[]
  neededApplicants Int
  requiredHours       Int
  posterId    Int    
  completed   Boolean      @default(false)      
  poster      User         @relation(name: "JobPoster", fields: [posterId], references: [id], onDelete: Cascade) // Employer who posted the job
  applications Application[]  // Applications from volunteers
}

// New model to represent applications by volunteers to jobs
model Application {
  id        Int      @id @default(autoincrement())
  jobId     Int
  applicantId Int
  location  String
  email     String
  note      String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant User     @relation(name: "Applicant", fields: [applicantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @db.VarChar(255) // e.g., "applied", "accepted", "rejected"
}
